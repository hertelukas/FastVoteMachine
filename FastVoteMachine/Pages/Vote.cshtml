@page "{id}"
@model FastVoteMachine.Pages.Vote

@{
    ViewData["Title"] = Model.Name;
}

<div class="text-center">
    <h1 class="display-4"> - @Model.Name - </h1>
    <p id="connected">Connected users: 0</p>
    <hr>
    
    @* Input *@
    <div class="small-container">
        <form action="" id="option-form" class="row g-3 d-flex">
            <div class="col-auto flex-fill">
                <input type="text" class="form-control" id="option-input" placeholder="Add a new option...">
            </div>
            <div class="col-auto flex">
                <button type="submit" class="btn btn-dark">Add</button>
            </div>
        </form>
    </div>
    
    @* Options  *@
    <div id="option-container">
        
    </div>
    
    <form action="" id="vote-form" class="text-center">
        <button id="vote-button" type="submit" class="btn btn-dark">Submit</button>
    </form>
    
    <br>
    
    <table class="table">
        <thead>
        <tr>
            <th scope="col">Option</th>
            <th scope="col">Votes</th>
        </tr>
        </thead>
        <tbody id="results">
        
        </tbody>
    </table>
</div>

<script src="~/js/signalr/dist/browser/signalr.js"></script>

<script >
    "use strict"
    let connection = new signalR.HubConnectionBuilder().withUrl("/voteHub").build();
    
    let connectedText = document.getElementById("connected");
    
    let optionForm = document.getElementById("option-form");
    let optionInput = document.getElementById("option-input");
    
    let optionContainer = document.getElementById("option-container");
    
    let voteForm = document.getElementById("vote-form");
    let voteButton = document.getElementById("vote-button");
   
    let results = document.getElementById("results");
    
    let options = [];
    
    // Receiving messages
    connection.on("UpdateConnected", function(amount) {
      connectedText.innerText = `Connected users: ${amount}`;
    });
    
    connection.on("AddedOption", function(option) {
      let label = document.createElement("label");
      label.setAttribute("for", option + "-option");
      label.textContent = option;
      label.classList.add("form-label");
      
      let input = document.createElement('input');
      input.setAttribute('type', 'range');
      input.setAttribute('min', 0);
      input.setAttribute('max', 5);
      input.setAttribute('step', 1);
      input.setAttribute('name', option);
      input.setAttribute('id', option + '-option');
      input.classList.add("form-range");
      
      options.push(input);
      optionContainer.appendChild(label);
      optionContainer.appendChild(input);
    });
    
    connection.on("UpdatedVotes", function(votes) {
      // Clear all children
      while(results.firstChild){
        results.removeChild(results.firstChild);
      }
      
      let map = [];
      
      for (const option in votes){
        map.push({option: option, value: votes[option]});    
      }
      
      map.sort((a, b) => {
          if (a.value > b.value) return -1;
          if (a.value < b.value) return 1;
          return 0;
      });
      
      map.forEach(vote => {
        let tr = document.createElement("tr");
        let th = document.createElement("th")
        th.setAttribute("scope", "row");
        th.textContent = vote.option;
        
        let td = document.createElement("td");
        td.textContent = vote.value;
        
        tr.appendChild(th);
        tr.appendChild(td);
        results.appendChild(tr);
      });
    });
    
    // Connect to the Hub
    connection.start().then(function () {
        connection.invoke("Connect", @Model.Id).catch(function (err) {
            // TODO handle error
            return console.error(err.toString());    
        });
    }).catch(function(err) {
      // TODO handle error
      return console.error(err.toString());
    });
   
    // Add new option
    optionForm.addEventListener('submit', function(e) {
      e.preventDefault();
      if (optionInput.value) {
        connection.invoke("AddOption", @Model.Id, optionInput.value).catch(function(err) {
          return console.error(err.toString());
        });
      }
    }); 
    
    // Send a vote
    voteForm.addEventListener('submit', function(e) {
      e.preventDefault();
      
      let map = [];
      options.forEach(option => {
         map.push([option.name, option.value]); 
      });
      
      connection.invoke("Vote", @Model.Id, map).catch(function(err) {
        return console.error(err.toString());
      });
      
      voteButton.disabled = true;
    });
    
</script>